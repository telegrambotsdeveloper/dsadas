import logging
from PIL import Image, ImageEnhance
from io import BytesIO
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —è—Ä–∫–æ—Å—Ç–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üîÜ +30%", callback_data='brightness_30'),
            InlineKeyboardButton("üîÜ +50%", callback_data='brightness_50'),
        ],
        [InlineKeyboardButton("üî¢ –°–≤–æ—è —è—Ä–∫–æ—Å—Ç—å", callback_data='custom')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —è—Ä–∫–æ—Å—Ç–∏:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data.startswith('brightness_'):
        percent = int(query.data.split('_')[1])
        user_data[user_id] = {'brightness': percent}
        await query.message.reply_text(f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —è—Ä–∫–æ—Å—Ç–∏ –Ω–∞ {percent}%")

    elif query.data == 'custom':
        user_data[user_id] = {'awaiting_custom': True}
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 45):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ —è—Ä–∫–æ—Å—Ç–∏
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if user_id in user_data and user_data[user_id].get('awaiting_custom'):
        try:
            percent = int(text)
            if 0 < percent <= 500:
                user_data[user_id] = {'brightness': percent}
                await update.message.reply_text(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —è—Ä–∫–æ—Å—Ç—å: +{percent}%. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
            else:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 500.")
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è—Ä–∫–æ—Å—Ç—å
    if user_id not in user_data or 'brightness' not in user_data[user_id]:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —è—Ä–∫–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é /start.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    photo = update.message.photo[-1]
    file = await context.bot.get_file(photo.file_id)
    file_bytes = BytesIO()
    await file.download_to_memory(out=file_bytes)
    file_bytes.seek(0)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —è—Ä–∫–æ—Å—Ç–∏
    try:
        image = Image.open(file_bytes)
        enhancer = ImageEnhance.Brightness(image)
        brightness_factor = 1 + (user_data[user_id]['brightness'] / 100)
        enhanced_image = enhancer.enhance(brightness_factor)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        output_bytes = BytesIO()
        output_bytes.name = 'brightened.jpg'
        enhanced_image.save(output_bytes, format='JPEG')
        output_bytes.seek(0)

        await update.message.reply_photo(photo=output_bytes, caption=f"–ì–æ—Ç–æ–≤–æ! –Ø—Ä–∫–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ {user_data[user_id]['brightness']}%")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    TOKEN = "8071436957:AAEiuBZT9vGCG5iRAS8unLylh1JEvBt7Yf8"  # üîÅ –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()